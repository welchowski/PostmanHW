{
	"info": {
		"_postman_id": "a896ff61-401d-4f28-b188-dfea0fbabfbe",
		"name": "HW2Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17672545"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Correct string\", function isContainsString () {\r",
							"     pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let response = pm.response.json()\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name is Slava\", function() {\r",
							"    pm.expect(response.name).to.eql(\"Slava\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age is 29\", function() {\r",
							"    pm.expect(response.age).to.eql(\"29\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Name is 15051\", function() {\r",
							"    pm.expect(response.salary).to.eql(15051);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name is Slava from request.data\", function() {\r",
							"    pm.expect(response.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age is 29 from request.data\", function() {\r",
							"    pm.expect(response.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary is 15051 from request.data \", function() {\r",
							"    pm.expect(response.salary).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(response.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary is 60204 from response.family.u_salary_1_5_year \", function() {\r",
							"    pm.expect(response.family.u_salary_1_5_year).to.eql(req.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name3}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salarylarge}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let response = pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name is Slava from request.data\", function() {\r",
							"    pm.expect(response.name).to.eql(req.get('name'));\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age is 22 from request.data\", function() {\r",
							"    pm.expect(response.age).to.eql(req.get('age'));\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary is 15051 from request.data \", function() {\r",
							"    pm.expect(response.salary).to.eql(Number(req.get('salary')));\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(response.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Parametr name in dog is present \", function() {\r",
							"    pm.expect(response.family.pets.dog.hasOwnProperty(\"name\")).to.eql(true)\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Parametr age in dog is present \", function() {\r",
							"    pm.expect(response.family.pets.dog.hasOwnProperty(\"age\")).to.eql(true)\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Parametr name in dog is Luky \", function() {\r",
							"    pm.expect(response.family.pets.dog.name).to.eql('Luky');\r",
							"\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Parametr age is 4\", function() {\r",
							"    pm.expect(response.family.pets.dog.age).to.eql(4);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name3}}&age={{age}}&salary={{salarysmall}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name3}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salarysmall}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request\r",
							"let response = pm.response.json()\r",
							"let req = pm.request.url.query\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name is Slava from request.data\", function() {\r",
							"    pm.expect(response.name).to.eql(req.get('name'));\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age is 22 from request.data\", function() {\r",
							"    pm.expect(response.age).to.eql(Number(req.get('age')));\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"\r",
							"\r",
							"console.log(req.get('salary'))\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(response.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(response.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(response.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(response.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary is 15051\", function() {\r",
							"    pm.expect(response.salary[0]).to.eql(Number(req.get('salary')));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary is 15051*2\", function() {\r",
							"    pm.expect(Number(response.salary[1])).to.eql(Number(req.get('salary')) * 2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary is 15051*3\", function() {\r",
							"    pm.expect(Number(response.salary[2])).to.eql(Number(req.get('salary')) * 3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"name\", \"Yan\");\r",
							"pm.environment.set(\"age\", 29);\r",
							"pm.environment.set(\"salary\", 1400);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"function salaryItems() {\r",
							"    for (let i = 0; i < 3; i++) {\r",
							"        console.log(response.salary[i])\r",
							"    }\r",
							"}\r",
							"\r",
							"salaryItems()"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name4}}&age={{age}}&salary={{salarylarge}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name4}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salarylarge}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"//7. Спарсить request\r",
							"let resp = pm.response.json()\r",
							"let req = request.data\r",
							"let exeption\r",
							"\r",
							"let allParametrsFromResponce = [\"start_qa_salary\", \"qa_salary_after_6_months\", \"qa_salary_after_12_months\", \"qa_salary_after_1.5_year\", \"qa_salary_after_3.5_years\", \"person\"]\r",
							"\r",
							"// 8-13 Проверить, что json response имеет параметры sallaries and person\r",
							"pm.test(\"Parametrs from responce is present\", function() {\r",
							"    for (let i = 0; i < allParametrsFromResponce.length; i++) {\r",
							"        try {\r",
							"            pm.expect(resp.hasOwnProperty(allParametrsFromResponce[i])).to.eql(true)\r",
							"            console.log(allParametrsFromResponce[i] + \" is Present\")\r",
							"        } catch (e) {\r",
							"            exeption = String(allParametrsFromResponce[i])\r",
							"            throw new Error(exeption + \" is absent\")\r",
							"        }\r",
							"\r",
							"    }\r",
							"})\r",
							"\r",
							"//14-18\r",
							"let salaryCooficient = [1, 2, 2.7, 3.3, 3.8]\r",
							"\r",
							"function slaryExpected(salaryFromReguest, cooficient) {\r",
							"    pm.expect(salaryFromReguest).to.eql(Number(req.salary) * cooficient)\r",
							"}\r",
							"\r",
							"pm.test(\"Salary test\", function() {\r",
							"    slaryExpected(resp.start_qa_salary, 1)\r",
							"    slaryExpected(resp.qa_salary_after_6_months, 2)\r",
							"    slaryExpected(resp.qa_salary_after_12_months, 2.7)\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(Number(req.salary) * 3.3)\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(Number(req.salary) * 3.8)\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1]==req.salary\", function() {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(Number(req.salary))\r",
							"\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.expect(resp.person.u_age).to.eql(Number(req.age))\r",
							"\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(Number(req.salary * 4.2))\r",
							"\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"function showElementsFromPerson() {\r",
							"    let objj = Object.entries(resp.person)\r",
							"    for (let i = 0; i < objj.length; i++) {\r",
							"        console.log(objj[i])\r",
							"    }\r",
							"}\r",
							"showElementsFromPerson()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name2}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salarysmall}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}